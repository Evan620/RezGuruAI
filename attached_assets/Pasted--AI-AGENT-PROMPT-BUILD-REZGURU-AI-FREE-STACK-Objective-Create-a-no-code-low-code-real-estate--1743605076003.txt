ü§ñ AI AGENT PROMPT: BUILD REZGURU AI (FREE STACK)
Objective: Create a no-code/low-code real estate automation platform with:

AI-powered lead scraping (tax delinquents, probate, FSBOs)

Automated outreach (SMS/email/voice)

CRM + document generation

Self-hosted infrastructure (zero cost)

üîß PHASE 1: SETUP FREE INFRASTRUCTURE
Step 1.1 - Frontend Hosting

Use Cloudflare Pages (free)

Framework: Next.js + Tailwind CSS

Template: Clone shadcn/ui starter:

bash
Copy
npx create-next-app@latest --example https://github.com/shadcn-ui/next-template
Step 1.2 - Backend & Database

Use Appwrite (self-hosted on free Fly.io instance):

bash
Copy
flyctl launch --image appwrite/appwrite
Configure collections:

leads (fields: name, phone, source, motivation_score)

automations (fields: trigger, action, user_id)

Step 1.3 - Automation Engine

Self-host n8n on Fly.io:

bash
Copy
flyctl launch --image n8nio/n8n
üì° PHASE 2: DATA SCRAPING MODULES
Step 2.1 - Tax Delinquent Scraper

Use Python + Scrapy + free proxies (from Free Proxy List)

Target county websites (e.g., [county].gov/tax-delinquent)

Sample scrapy spider:

python
Copy
import scrapy
class TaxSpider(scrapy.Spider):
    name = 'tax'
    start_urls = ['http://county.gov/tax-delinquent']
    
    def parse(self, response):
        yield {
            'name': response.css('.owner::text').get(),
            'address': response.css('.address::text').get()
        }
Run daily via GitHub Actions (free cron jobs):

yaml
Copy
# .github/workflows/scrape.yml
on:
  schedule:
    - cron: '0 3 * * *' # 3 AM daily
jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pip install scrapy && scrapy runspider tax_spider.py -o leads.json
Step 2.2 - Probate Leads

Scrape court websites using Selenium + Chrome Headless

Free OCR for PDFs: Tesseract

python
Copy
import pytesseract
text = pytesseract.image_to_string('probate_filing.pdf')
üß† PHASE 3: AI INTEGRATION (FREE MODELS)
Step 3.1 - Lead Scoring

Use HuggingFace Zephyr-7B (free inference API):

python
Copy
from transformers import pipeline
classifier = pipeline("text-classification", model="HuggingFaceH4/zephyr-7b-beta")
score = classifier("Lead: Elderly owner, inherited property")[0]['score']
Step 3.2 - AI Voice Calls

Azure TTS (free tier):

python
Copy
import azure.cognitiveservices.speech as speechsdk
speech_config = speechsdk.SpeechConfig(subscription="FREE_KEY", region="eastus")
synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config)
synthesizer.speak_text_async("Hello, this is RezGuru AI calling...").get()
Step 3.3 - Document Generation

LaTeX + Pandoc (free PDFs):

bash
Copy
pandoc contract.md -o contract.pdf --template=eisvogel.tex
‚öôÔ∏è PHASE 4: WORKFLOW AUTOMATION (N8N)
Step 4.1 - Connect Appwrite ‚Üí n8n

Use Appwrite Webhooks to trigger n8n flows on new leads.

Step 4.2 - Outreach Automation

Build this n8n workflow:

Copy
[Trigger: New lead in Appwrite]  
‚Üí [AI Scoring via HuggingFace]  
‚Üí [If score > 70: Send SMS via Vonage]  
‚Üí [If no reply in 24h: Call via Azure TTS]  
‚Üí [Log response in Airtable]  
üåê PHASE 5: FRONTEND DASHBOARD
Step 5.1 - Key Pages

Leads Dashboard (Next.js):

Show leads sorted by AI score

Filter by source (tax/probate/FSBO)

Automation Studio (React Flow):

Drag-and-drop workflow builder

Step 5.2 - Libraries

Tables: TanStack Table

Charts: Chart.js

PDF Viewer: PDF.js

üì¢ PHASE 6: LAUNCH & MONETIZE
Step 6.1 - Free Tier

100 leads/month

Basic SMS

Step 6.2 - Paid Tiers

$29/mo: Unlimited AI scoring + automations

$99/mo: White-label + API access

Step 6.3 - Marketing

Post in BiggerPockets forums

YouTube shorts: "How I automated 100 leads/day for free"

üö® PERFORMANCE OPTIMIZATIONS
Caching: Redis (free Fly.io add-on)

Rate Limiting: Cloudflare Workers

Fallbacks: If HuggingFace API fails, use local Mistral-7B (via Ollama)

üîó REQUIRED LINKS
Appwrite Docs

n8n Nodes

HuggingFace Spaces

AI Agent Instructions:

Execute Phase 1 first (set up infrastructure).

Validate each step before proceeding (e.g., confirm Appwrite is reachable).

Report bottlenecks (e.g., "Azure TTS quota exceeded ‚Üí switch to Mimic3").